#!/usr/bin/env python3

#    Copyright (C) 2001  Jeff Epler  <jepler@unpythonic.dhs.org>
#    Copyright (C) 2006  Csaba Henk  <csaba.henk@creo.hu>
#
#    This program can be distributed under the terms of the GNU LGPL.
#    See the file COPYING.
#

import os, sys, math
from errno import *
from stat import *
import fcntl
# pull in some spaghetti to make this stuff work without fuse-py being installed
try:
    import find_fuse_parts
except ImportError:
    pass
import fuse
from fuse import Fuse
import psutil


if not hasattr(fuse, '__version__'):
    raise RuntimeError("your fuse-py doesn't know of fuse.__version__, probably it's too old.")

fuse.fuse_python_api = (0, 2)

fuse.feature_assert('stateful_files', 'has_init')

def get_fs_type(pathtocheck):
    root_type = ""
    for part in psutil.disk_partitions(all=True):
        if part.mountpoint == '/':
            root_type = part.fstype
            continue

        if pathtocheck.startswith(part.mountpoint):
            return part.fstype

    return root_type

def flag2mode(flags):
    md = {os.O_RDONLY: 'rb', os.O_WRONLY: 'wb', os.O_RDWR: 'wb+'}
    m = md[flags & (os.O_RDONLY | os.O_WRONLY | os.O_RDWR)]

    if flags | os.O_APPEND:
        m = m.replace('w', 'a', 1)

    return m

class rcloneStat(object):
    """ Dummy class to alter inode numbers that are unusually large
     when reported by rclone (too large for c bindings)"""
    def __init__(self, stat):
        self.st_mode = stat.st_mode
        self.st_ino = stat.st_ino
        while self.st_ino >= 2147483647: # make sure this can be handled as c integer
            self.st_ino = math.floor(self.st_ino / 100)
        self.st_dev = stat.st_dev
        self.st_nlink = stat.st_nlink
        self.st_uid = stat.st_uid
        self.st_gid = stat.st_gid
        self.st_size = stat.st_size
        self.st_atime = stat.st_atime
        self.st_mtime = stat.st_mtime
        self.st_ctime = stat.st_ctime


class SubsetFs(Fuse):

    def __init__(self, *args, **kw):

        Fuse.__init__(self, *args, **kw)
        self.upper = '/'
        self.lower = '/tmp'

    @property
    def isrclone(self):
        if 'fuse.rclone' in get_fs_type(self.upper):
            return True
        return False

    def getattr(self, path):
        if self.isrclone:
            return rcloneStat(os.lstat("." + path))
        return os.lstat("." + path)

    def readlink(self, path):
        return os.readlink("." + path)

    def readdir(self, path, offset):
        hidden = []
        if path == os.sep:
            hidden = os.listdir(self.lower)
        for e in os.listdir("." + path):
            if e in hidden:
                continue
            yield fuse.Direntry(e)

    def unlink(self, path):
        os.unlink("." + path)

    def rmdir(self, path):
        os.rmdir("." + path)

    def symlink(self, path, path1):
        os.symlink(path, "." + path1)

    def rename(self, path, path1):
        os.rename("." + path, "." + path1)

    def link(self, path, path1):
        os.link("." + path, "." + path1)

    def chmod(self, path, mode):
        os.chmod("." + path, mode)

    def chown(self, path, user, group):
        os.chown("." + path, user, group)

    def truncate(self, path, len):
        f = open("." + path, "a")
        f.truncate(len)
        f.close()

    def mknod(self, path, mode, dev):
        os.mknod("." + path, mode, dev)

    def mkdir(self, path, mode):
        os.mkdir("." + path, mode)

    def utime(self, path, times):
        os.utime("." + path, times)

    def access(self, path, mode):
        if not os.access("." + path, mode):
            return -EACCES

    def statfs(self):
        return os.statvfs(".")

    def fsinit(self):
        os.chdir(self.upper)

    class XmpFile(object):

        def __init__(self, path, flags, *mode):
            self.file = os.fdopen(os.open("." + path, flags, *mode),
                                  flag2mode(flags))
            self.fd = self.file.fileno()

        def read(self, length, offset):
            self.file.seek(offset)
            return self.file.read(length)

        def write(self, buf, offset):
            self.file.seek(offset)
            self.file.write(buf)
            return len(buf)

        def release(self, flags):
            self.file.close()

        def _fflush(self):
            if 'w' in self.file.mode or 'a' in self.file.mode:
                self.file.flush()

        def fsync(self, isfsyncfile):
            self._fflush()
            if isfsyncfile and hasattr(os, 'fdatasync'):
                os.fdatasync(self.fd)
            else:
                os.fsync(self.fd)

        def flush(self):
            self._fflush()
            os.close(os.dup(self.fd))

        def fgetattr(self):
            return os.fstat(self.fd)

        def ftruncate(self, len):
            self.file.truncate(len)

        def lock(self, cmd, owner, **kw):
            op = {fcntl.F_UNLCK : fcntl.LOCK_UN,
                   fcntl.F_RDLCK : fcntl.LOCK_SH,
                   fcntl.F_WRLCK : fcntl.LOCK_EX}[kw['l_type']]
            if cmd == fcntl.F_GETLK:
                return -EOPNOTSUPP
            elif cmd == fcntl.F_SETLK:
                if op != fcntl.LOCK_UN:
                    op |= fcntl.LOCK_NB
            elif cmd == fcntl.F_SETLKW:
                pass
            else:
                return -EINVAL

            fcntl.lockf(self.fd, op, kw['l_start'], kw['l_len'])


    def main(self, *a, **kw):

        self.file_class = self.XmpFile
        return Fuse.main(self, *a, **kw)


def main():

    usage = """ Userspace subset FS. Hide everything that exists in the subset part from the root directory of the source mount """ + Fuse.fusage
    
    server = SubsetFs(version="%prog " + fuse.__version__,
                 usage=usage,
                 dash_s_do='setsingle')
    server.parser.add_option(mountopt="upper", metavar="upper", default='/mnt', help="mount files from here")
    server.parser.add_option(mountopt="lower", metavar="lower", default='/tmp', help="hide files that exist in here")
    server.parse(values=server, errex=1)

    try:
        if server.fuse_args.mount_expected():
            os.chdir(server.upper)
    except OSError:
        print("Error: can't enter upper directory of underlying filesystem", file=sys.stderr)
        sys.exit(1)
    
    try:
        os.listdir(server.lower)
    except OSError:
        print("Error: can't list lower directory of underlying filesystem", file=sys.stderr)
        sys.exit(1)

    server.main()


if __name__ == '__main__':
    # subsetfs -o upper=/mnt/rclone -o lower=/mnt/nfs /mnt/subset/
    main()

    